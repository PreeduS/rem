
tty

/dev/pts

echo "test" > /dev/pts/1	#get returned to the terminal


---------------
#partitions

ls -l /dev | grep sd

#check uuid, #devices sda,sdb,sdc etc, don't maintain order when plugged in/out

primary, extended partition,		#extended - primary - same size
mbr label, mbr partition table		
mbr partition table 				#max 2.2 TB	
									#max 4 primary partitions

GPT partition table					#GUID Partition Table
									#UEFI boot required
-legacy MBR header
-up to 128 partitions


---------------
#partitions


---------------
#filesystems

mke2fs -t ext4 -n /dev/sdc1

mkfs.ext4

---------------
#mount

mount -t ext4 /dev/sdc1 /testDir			#mount -t type /path/device /path/dir
mount -l -t ext4							#list all ext4 mounts

umount /testDir

#unmounting & mounting keeps the data on the device
#on mount - replaces the data on the target dir mountpoint
#on unmount - returns the data




#mount -t ext4 -o discard /dev/sdc1 /testDir		#check



#/etc/fstab									#mount automatically on boot

#ex:
#/dev/sdc1	/testmount	ext4	ro,discard	0 0


#get devices uuid
blkid				
lsblk --fs

#in fstab, replace device path(ex: /dev/sdc1) with its UUID(UUID=...)
#to ensure that devices maintain order after plugged in/out


#mount -a			#mount all devices on /etc/fstab



---------------
df -h				#disk free
du

---------------
#LVM


#physical volume
pvcreate /dev/sdb1								#add lvm label(by default - written second sector of the device or partition)
												#marked as claimed by lvm
												#label - contains uuid, size info and pointer to the lvm metadata

												#metadata - added by default after the label
pvcreate --metadatacopies 2 -v /dev/sdc1		#create 2 copies of the metadata - one after the lvm header, second at the end of the partition


pvdisplay /dev/sdb1
pvremove /dev/sdb1

pvs
-----
#volume groups
vgcreate vg_name /dev/sdb1

vgdisplay vg_name
vgs

#lvcreate ...

------------------------------------------------------------------------------------------




#partition
/boot		#first			#ext2?
/			#next

swap		#second last	#memory size + ~100MB
							#minimum of 4gb
/home		#last							

---------------

Boot sector
Master Boot Record (MBR)		512 bytes							#first sector of a data storage device that has been partitioned

-Primary boot loader 			446 bytes(Bootstrap code area)
								#offset 440(dec) - stage 2 start address, data for ljmp
-Partition table				64 bytes(4 primary partition x16)
-Boot signature					2 bytes		#hex: 55 AA


Volume Boot Record (VBR) 											#first sector of a data storage device that has not been partitioned








--------------

https://www.youtube.com/watch?v=1QsunXeUwP8&index=6&list=PLkp40uss1kSKKDtU5LjCEXXtEb0V6IHDr
https://www.youtube.com/playlist?list=PLkp40uss1kSKKDtU5LjCEXXtEb0V6IHDr
https://www.youtube.com/playlist?list=PLpKIAFYBxQOWzJjInMUaKtamCshDmLjej
https://www.youtube.com/watch?v=JV0JEM_HPLU&index=2&list=PLl9FKlo0R0vFDzK8Ng3f9oqOQk-gaxPEe

rsyslog
inotify 
----
0x7C00 to 0x7DFF
Stage 1 is loaded here by BIOS or another boot loader
----


The BIOS is ignorant of the distinction between VBRs and MBRs, and of partitioning. The firmware simply loads and runs the first sector of the storage device

---------------
Primary boot loader is to find and load the secondary boot loader (stage 2).It does this by looking through the partition table for an active partition. 
When it finds an active partition, it scans the remaining partitions in the table to ensure that they're all inactive. When this is verified, 
the active partition's boot record is read from the device into RAM and executed.

---------------
dd if=/dev/hda of=mbr.bin bs=512 count=1
od -xa mbr.bin									#prints the binary file in hex and ASCII formats
